module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateRocket {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createRocket(data: RocketCreateInput!): Rocket!
  updateRocket(data: RocketUpdateInput!, where: RocketWhereUniqueInput!): Rocket
  updateManyRockets(data: RocketUpdateManyMutationInput!, where: RocketWhereInput): BatchPayload!
  upsertRocket(where: RocketWhereUniqueInput!, create: RocketCreateInput!, update: RocketUpdateInput!): Rocket!
  deleteRocket(where: RocketWhereUniqueInput!): Rocket
  deleteManyRockets(where: RocketWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  rocket(where: RocketWhereUniqueInput!): Rocket
  rockets(where: RocketWhereInput, orderBy: RocketOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rocket]!
  rocketsConnection(where: RocketWhereInput, orderBy: RocketOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RocketConnection!
  node(id: ID!): Node
}

type Rocket {
  name: String!
  country: String!
  cost: Int!
  id: ID!
  payloadLeo: Int
  payloadGto: Int
  kgLeo: Int
  kgGto: Int
}

type RocketConnection {
  pageInfo: PageInfo!
  edges: [RocketEdge]!
  aggregate: AggregateRocket!
}

input RocketCreateInput {
  name: String!
  country: String!
  cost: Int!
  payloadLeo: Int
  payloadGto: Int
  kgLeo: Int
  kgGto: Int
}

type RocketEdge {
  node: Rocket!
  cursor: String!
}

enum RocketOrderByInput {
  name_ASC
  name_DESC
  country_ASC
  country_DESC
  cost_ASC
  cost_DESC
  id_ASC
  id_DESC
  payloadLeo_ASC
  payloadLeo_DESC
  payloadGto_ASC
  payloadGto_DESC
  kgLeo_ASC
  kgLeo_DESC
  kgGto_ASC
  kgGto_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RocketPreviousValues {
  name: String!
  country: String!
  cost: Int!
  id: ID!
  payloadLeo: Int
  payloadGto: Int
  kgLeo: Int
  kgGto: Int
}

type RocketSubscriptionPayload {
  mutation: MutationType!
  node: Rocket
  updatedFields: [String!]
  previousValues: RocketPreviousValues
}

input RocketSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RocketWhereInput
  AND: [RocketSubscriptionWhereInput!]
  OR: [RocketSubscriptionWhereInput!]
  NOT: [RocketSubscriptionWhereInput!]
}

input RocketUpdateInput {
  name: String
  country: String
  cost: Int
  payloadLeo: Int
  payloadGto: Int
  kgLeo: Int
  kgGto: Int
}

input RocketUpdateManyMutationInput {
  name: String
  country: String
  cost: Int
  payloadLeo: Int
  payloadGto: Int
  kgLeo: Int
  kgGto: Int
}

input RocketWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  cost: Int
  cost_not: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  cost_lt: Int
  cost_lte: Int
  cost_gt: Int
  cost_gte: Int
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  payloadLeo: Int
  payloadLeo_not: Int
  payloadLeo_in: [Int!]
  payloadLeo_not_in: [Int!]
  payloadLeo_lt: Int
  payloadLeo_lte: Int
  payloadLeo_gt: Int
  payloadLeo_gte: Int
  payloadGto: Int
  payloadGto_not: Int
  payloadGto_in: [Int!]
  payloadGto_not_in: [Int!]
  payloadGto_lt: Int
  payloadGto_lte: Int
  payloadGto_gt: Int
  payloadGto_gte: Int
  kgLeo: Int
  kgLeo_not: Int
  kgLeo_in: [Int!]
  kgLeo_not_in: [Int!]
  kgLeo_lt: Int
  kgLeo_lte: Int
  kgLeo_gt: Int
  kgLeo_gte: Int
  kgGto: Int
  kgGto_not: Int
  kgGto_in: [Int!]
  kgGto_not_in: [Int!]
  kgGto_lt: Int
  kgGto_lte: Int
  kgGto_gt: Int
  kgGto_gte: Int
  AND: [RocketWhereInput!]
  OR: [RocketWhereInput!]
  NOT: [RocketWhereInput!]
}

input RocketWhereUniqueInput {
  id: ID
}

type Subscription {
  rocket(where: RocketSubscriptionWhereInput): RocketSubscriptionPayload
}
`
      }
    