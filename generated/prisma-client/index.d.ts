// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  rocket: (where?: RocketWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  rocket: (where: RocketWhereUniqueInput) => RocketPromise;
  rockets: (
    args?: {
      where?: RocketWhereInput;
      orderBy?: RocketOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Rocket>;
  rocketsConnection: (
    args?: {
      where?: RocketWhereInput;
      orderBy?: RocketOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RocketConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createRocket: (data: RocketCreateInput) => RocketPromise;
  updateRocket: (
    args: { data: RocketUpdateInput; where: RocketWhereUniqueInput }
  ) => RocketPromise;
  updateManyRockets: (
    args: { data: RocketUpdateManyMutationInput; where?: RocketWhereInput }
  ) => BatchPayloadPromise;
  upsertRocket: (
    args: {
      where: RocketWhereUniqueInput;
      create: RocketCreateInput;
      update: RocketUpdateInput;
    }
  ) => RocketPromise;
  deleteRocket: (where: RocketWhereUniqueInput) => RocketPromise;
  deleteManyRockets: (where?: RocketWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  rocket: (
    where?: RocketSubscriptionWhereInput
  ) => RocketSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type RocketOrderByInput =
  | "name_ASC"
  | "name_DESC"
  | "country_ASC"
  | "country_DESC"
  | "cost_ASC"
  | "cost_DESC"
  | "id_ASC"
  | "id_DESC"
  | "payloadLeo_ASC"
  | "payloadLeo_DESC"
  | "payloadGto_ASC"
  | "payloadGto_DESC"
  | "kgLeo_ASC"
  | "kgLeo_DESC"
  | "kgGto_ASC"
  | "kgGto_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type RocketWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface RocketWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  cost?: Int;
  cost_not?: Int;
  cost_in?: Int[] | Int;
  cost_not_in?: Int[] | Int;
  cost_lt?: Int;
  cost_lte?: Int;
  cost_gt?: Int;
  cost_gte?: Int;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  payloadLeo?: Int;
  payloadLeo_not?: Int;
  payloadLeo_in?: Int[] | Int;
  payloadLeo_not_in?: Int[] | Int;
  payloadLeo_lt?: Int;
  payloadLeo_lte?: Int;
  payloadLeo_gt?: Int;
  payloadLeo_gte?: Int;
  payloadGto?: Int;
  payloadGto_not?: Int;
  payloadGto_in?: Int[] | Int;
  payloadGto_not_in?: Int[] | Int;
  payloadGto_lt?: Int;
  payloadGto_lte?: Int;
  payloadGto_gt?: Int;
  payloadGto_gte?: Int;
  kgLeo?: Int;
  kgLeo_not?: Int;
  kgLeo_in?: Int[] | Int;
  kgLeo_not_in?: Int[] | Int;
  kgLeo_lt?: Int;
  kgLeo_lte?: Int;
  kgLeo_gt?: Int;
  kgLeo_gte?: Int;
  kgGto?: Int;
  kgGto_not?: Int;
  kgGto_in?: Int[] | Int;
  kgGto_not_in?: Int[] | Int;
  kgGto_lt?: Int;
  kgGto_lte?: Int;
  kgGto_gt?: Int;
  kgGto_gte?: Int;
  AND?: RocketWhereInput[] | RocketWhereInput;
  OR?: RocketWhereInput[] | RocketWhereInput;
  NOT?: RocketWhereInput[] | RocketWhereInput;
}

export interface RocketCreateInput {
  name: String;
  country: String;
  cost: Int;
  payloadLeo?: Int;
  payloadGto?: Int;
  kgLeo?: Int;
  kgGto?: Int;
}

export interface RocketUpdateInput {
  name?: String;
  country?: String;
  cost?: Int;
  payloadLeo?: Int;
  payloadGto?: Int;
  kgLeo?: Int;
  kgGto?: Int;
}

export interface RocketUpdateManyMutationInput {
  name?: String;
  country?: String;
  cost?: Int;
  payloadLeo?: Int;
  payloadGto?: Int;
  kgLeo?: Int;
  kgGto?: Int;
}

export interface RocketSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RocketWhereInput;
  AND?: RocketSubscriptionWhereInput[] | RocketSubscriptionWhereInput;
  OR?: RocketSubscriptionWhereInput[] | RocketSubscriptionWhereInput;
  NOT?: RocketSubscriptionWhereInput[] | RocketSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Rocket {
  name: String;
  country: String;
  cost: Int;
  id: ID_Output;
  payloadLeo?: Int;
  payloadGto?: Int;
  kgLeo?: Int;
  kgGto?: Int;
}

export interface RocketPromise extends Promise<Rocket>, Fragmentable {
  name: () => Promise<String>;
  country: () => Promise<String>;
  cost: () => Promise<Int>;
  id: () => Promise<ID_Output>;
  payloadLeo: () => Promise<Int>;
  payloadGto: () => Promise<Int>;
  kgLeo: () => Promise<Int>;
  kgGto: () => Promise<Int>;
}

export interface RocketSubscription
  extends Promise<AsyncIterator<Rocket>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  cost: () => Promise<AsyncIterator<Int>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  payloadLeo: () => Promise<AsyncIterator<Int>>;
  payloadGto: () => Promise<AsyncIterator<Int>>;
  kgLeo: () => Promise<AsyncIterator<Int>>;
  kgGto: () => Promise<AsyncIterator<Int>>;
}

export interface RocketConnection {
  pageInfo: PageInfo;
  edges: RocketEdge[];
}

export interface RocketConnectionPromise
  extends Promise<RocketConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RocketEdge>>() => T;
  aggregate: <T = AggregateRocketPromise>() => T;
}

export interface RocketConnectionSubscription
  extends Promise<AsyncIterator<RocketConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RocketEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRocketSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface RocketEdge {
  node: Rocket;
  cursor: String;
}

export interface RocketEdgePromise extends Promise<RocketEdge>, Fragmentable {
  node: <T = RocketPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RocketEdgeSubscription
  extends Promise<AsyncIterator<RocketEdge>>,
    Fragmentable {
  node: <T = RocketSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRocket {
  count: Int;
}

export interface AggregateRocketPromise
  extends Promise<AggregateRocket>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRocketSubscription
  extends Promise<AsyncIterator<AggregateRocket>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface RocketSubscriptionPayload {
  mutation: MutationType;
  node: Rocket;
  updatedFields: String[];
  previousValues: RocketPreviousValues;
}

export interface RocketSubscriptionPayloadPromise
  extends Promise<RocketSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RocketPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RocketPreviousValuesPromise>() => T;
}

export interface RocketSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RocketSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RocketSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RocketPreviousValuesSubscription>() => T;
}

export interface RocketPreviousValues {
  name: String;
  country: String;
  cost: Int;
  id: ID_Output;
  payloadLeo?: Int;
  payloadGto?: Int;
  kgLeo?: Int;
  kgGto?: Int;
}

export interface RocketPreviousValuesPromise
  extends Promise<RocketPreviousValues>,
    Fragmentable {
  name: () => Promise<String>;
  country: () => Promise<String>;
  cost: () => Promise<Int>;
  id: () => Promise<ID_Output>;
  payloadLeo: () => Promise<Int>;
  payloadGto: () => Promise<Int>;
  kgLeo: () => Promise<Int>;
  kgGto: () => Promise<Int>;
}

export interface RocketPreviousValuesSubscription
  extends Promise<AsyncIterator<RocketPreviousValues>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  cost: () => Promise<AsyncIterator<Int>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  payloadLeo: () => Promise<AsyncIterator<Int>>;
  payloadGto: () => Promise<AsyncIterator<Int>>;
  kgLeo: () => Promise<AsyncIterator<Int>>;
  kgGto: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Rocket",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
