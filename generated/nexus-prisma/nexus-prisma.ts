/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Rocket: RocketObject
      RocketConnection: RocketConnectionObject
      PageInfo: PageInfoObject
      RocketEdge: RocketEdgeObject
      AggregateRocket: AggregateRocketObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      RocketSubscriptionPayload: RocketSubscriptionPayloadObject
      RocketPreviousValues: RocketPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Rocket: RocketFieldDetails
      RocketConnection: RocketConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      RocketEdge: RocketEdgeFieldDetails
      AggregateRocket: AggregateRocketFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      RocketSubscriptionPayload: RocketSubscriptionPayloadFieldDetails
      RocketPreviousValues: RocketPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      RocketWhereUniqueInput: RocketWhereUniqueInputInputObject
      RocketWhereInput: RocketWhereInputInputObject
      RocketCreateInput: RocketCreateInputInputObject
      RocketUpdateInput: RocketUpdateInputInputObject
      RocketUpdateManyMutationInput: RocketUpdateManyMutationInputInputObject
      RocketSubscriptionWhereInput: RocketSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    RocketOrderByInput: RocketOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'rocket', args?: QueryRocketArgs[] | false, alias?: string  } 
  | { name: 'rockets', args?: QueryRocketsArgs[] | false, alias?: string  } 
  | { name: 'rocketsConnection', args?: QueryRocketsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'rocket'
  | 'rockets'
  | 'rocketsConnection'


type QueryRocketArgs =
  | 'where'
type QueryRocketsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRocketsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  rocket: {
    type: 'Rocket'
    args: Record<QueryRocketArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: RocketWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Rocket | null> | prisma.Rocket | null
  }
  rockets: {
    type: 'Rocket'
    args: Record<QueryRocketsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RocketWhereInput | null, orderBy?: prisma.RocketOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Rocket[]> | prisma.Rocket[]
  }
  rocketsConnection: {
    type: 'RocketConnection'
    args: Record<QueryRocketsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RocketWhereInput | null, orderBy?: prisma.RocketOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RocketConnection> | prisma.RocketConnection
  }
}
  

// Types for Rocket

type RocketObject =
  | RocketFields
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'cost', args?: [] | false, alias?: string  } 
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'payloadLeo', args?: [] | false, alias?: string  } 
  | { name: 'payloadGto', args?: [] | false, alias?: string  } 
  | { name: 'kgLeo', args?: [] | false, alias?: string  } 
  | { name: 'kgGto', args?: [] | false, alias?: string  } 

type RocketFields =
  | 'name'
  | 'country'
  | 'cost'
  | 'id'
  | 'payloadLeo'
  | 'payloadGto'
  | 'kgLeo'
  | 'kgGto'



  

export interface RocketFieldDetails {
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  cost: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  payloadLeo: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  payloadGto: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  kgLeo: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  kgGto: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for RocketConnection

type RocketConnectionObject =
  | RocketConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type RocketConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface RocketConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RocketConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'RocketEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"RocketConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RocketEdge[]> | prisma.RocketEdge[]
  }
  aggregate: {
    type: 'AggregateRocket'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RocketConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateRocket> | prisma.AggregateRocket
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for RocketEdge

type RocketEdgeObject =
  | RocketEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type RocketEdgeFields =
  | 'node'
  | 'cursor'



  

export interface RocketEdgeFieldDetails {
  node: {
    type: 'Rocket'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RocketEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Rocket> | prisma.Rocket
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateRocket

type AggregateRocketObject =
  | AggregateRocketFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateRocketFields =
  | 'count'



  

export interface AggregateRocketFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createRocket', args?: MutationCreateRocketArgs[] | false, alias?: string  } 
  | { name: 'updateRocket', args?: MutationUpdateRocketArgs[] | false, alias?: string  } 
  | { name: 'updateManyRockets', args?: MutationUpdateManyRocketsArgs[] | false, alias?: string  } 
  | { name: 'upsertRocket', args?: MutationUpsertRocketArgs[] | false, alias?: string  } 
  | { name: 'deleteRocket', args?: MutationDeleteRocketArgs[] | false, alias?: string  } 
  | { name: 'deleteManyRockets', args?: MutationDeleteManyRocketsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createRocket'
  | 'updateRocket'
  | 'updateManyRockets'
  | 'upsertRocket'
  | 'deleteRocket'
  | 'deleteManyRockets'


type MutationCreateRocketArgs =
  | 'data'
type MutationUpdateRocketArgs =
  | 'data'
  | 'where'
type MutationUpdateManyRocketsArgs =
  | 'data'
  | 'where'
type MutationUpsertRocketArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteRocketArgs =
  | 'where'
type MutationDeleteManyRocketsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createRocket: {
    type: 'Rocket'
    args: Record<MutationCreateRocketArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RocketCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Rocket> | prisma.Rocket
  }
  updateRocket: {
    type: 'Rocket'
    args: Record<MutationUpdateRocketArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RocketUpdateInput, where: RocketWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Rocket | null> | prisma.Rocket | null
  }
  updateManyRockets: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyRocketsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RocketUpdateManyMutationInput, where?: RocketWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertRocket: {
    type: 'Rocket'
    args: Record<MutationUpsertRocketArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RocketWhereUniqueInput, create: RocketCreateInput, update: RocketUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Rocket> | prisma.Rocket
  }
  deleteRocket: {
    type: 'Rocket'
    args: Record<MutationDeleteRocketArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RocketWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Rocket | null> | prisma.Rocket | null
  }
  deleteManyRockets: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyRocketsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: RocketWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'rocket', args?: SubscriptionRocketArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'rocket'


type SubscriptionRocketArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  rocket: {
    type: 'RocketSubscriptionPayload'
    args: Record<SubscriptionRocketArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: RocketSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RocketSubscriptionPayload | null> | prisma.RocketSubscriptionPayload | null
  }
}
  

// Types for RocketSubscriptionPayload

type RocketSubscriptionPayloadObject =
  | RocketSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type RocketSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface RocketSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RocketSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Rocket'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RocketSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Rocket | null> | prisma.Rocket | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'RocketPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RocketSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RocketPreviousValues | null> | prisma.RocketPreviousValues | null
  }
}
  

// Types for RocketPreviousValues

type RocketPreviousValuesObject =
  | RocketPreviousValuesFields
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'cost', args?: [] | false, alias?: string  } 
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'payloadLeo', args?: [] | false, alias?: string  } 
  | { name: 'payloadGto', args?: [] | false, alias?: string  } 
  | { name: 'kgLeo', args?: [] | false, alias?: string  } 
  | { name: 'kgGto', args?: [] | false, alias?: string  } 

type RocketPreviousValuesFields =
  | 'name'
  | 'country'
  | 'cost'
  | 'id'
  | 'payloadLeo'
  | 'payloadGto'
  | 'kgLeo'
  | 'kgGto'



  

export interface RocketPreviousValuesFieldDetails {
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  cost: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  payloadLeo: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  payloadGto: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  kgLeo: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  kgGto: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface RocketWhereUniqueInput {
  id?: string | null
}
export type RocketWhereUniqueInputInputObject =
  | Extract<keyof RocketWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface RocketWhereInput {
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  country?: string | null
  country_not?: string | null
  country_in?: string[]
  country_not_in?: string[]
  country_lt?: string | null
  country_lte?: string | null
  country_gt?: string | null
  country_gte?: string | null
  country_contains?: string | null
  country_not_contains?: string | null
  country_starts_with?: string | null
  country_not_starts_with?: string | null
  country_ends_with?: string | null
  country_not_ends_with?: string | null
  cost?: number | null
  cost_not?: number | null
  cost_in?: number[]
  cost_not_in?: number[]
  cost_lt?: number | null
  cost_lte?: number | null
  cost_gt?: number | null
  cost_gte?: number | null
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  payloadLeo?: number | null
  payloadLeo_not?: number | null
  payloadLeo_in?: number[]
  payloadLeo_not_in?: number[]
  payloadLeo_lt?: number | null
  payloadLeo_lte?: number | null
  payloadLeo_gt?: number | null
  payloadLeo_gte?: number | null
  payloadGto?: number | null
  payloadGto_not?: number | null
  payloadGto_in?: number[]
  payloadGto_not_in?: number[]
  payloadGto_lt?: number | null
  payloadGto_lte?: number | null
  payloadGto_gt?: number | null
  payloadGto_gte?: number | null
  kgLeo?: number | null
  kgLeo_not?: number | null
  kgLeo_in?: number[]
  kgLeo_not_in?: number[]
  kgLeo_lt?: number | null
  kgLeo_lte?: number | null
  kgLeo_gt?: number | null
  kgLeo_gte?: number | null
  kgGto?: number | null
  kgGto_not?: number | null
  kgGto_in?: number[]
  kgGto_not_in?: number[]
  kgGto_lt?: number | null
  kgGto_lte?: number | null
  kgGto_gt?: number | null
  kgGto_gte?: number | null
  AND?: RocketWhereInput[]
  OR?: RocketWhereInput[]
  NOT?: RocketWhereInput[]
}
export type RocketWhereInputInputObject =
  | Extract<keyof RocketWhereInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'country_not', alias?: string  } 
  | { name: 'country_in', alias?: string  } 
  | { name: 'country_not_in', alias?: string  } 
  | { name: 'country_lt', alias?: string  } 
  | { name: 'country_lte', alias?: string  } 
  | { name: 'country_gt', alias?: string  } 
  | { name: 'country_gte', alias?: string  } 
  | { name: 'country_contains', alias?: string  } 
  | { name: 'country_not_contains', alias?: string  } 
  | { name: 'country_starts_with', alias?: string  } 
  | { name: 'country_not_starts_with', alias?: string  } 
  | { name: 'country_ends_with', alias?: string  } 
  | { name: 'country_not_ends_with', alias?: string  } 
  | { name: 'cost', alias?: string  } 
  | { name: 'cost_not', alias?: string  } 
  | { name: 'cost_in', alias?: string  } 
  | { name: 'cost_not_in', alias?: string  } 
  | { name: 'cost_lt', alias?: string  } 
  | { name: 'cost_lte', alias?: string  } 
  | { name: 'cost_gt', alias?: string  } 
  | { name: 'cost_gte', alias?: string  } 
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'payloadLeo', alias?: string  } 
  | { name: 'payloadLeo_not', alias?: string  } 
  | { name: 'payloadLeo_in', alias?: string  } 
  | { name: 'payloadLeo_not_in', alias?: string  } 
  | { name: 'payloadLeo_lt', alias?: string  } 
  | { name: 'payloadLeo_lte', alias?: string  } 
  | { name: 'payloadLeo_gt', alias?: string  } 
  | { name: 'payloadLeo_gte', alias?: string  } 
  | { name: 'payloadGto', alias?: string  } 
  | { name: 'payloadGto_not', alias?: string  } 
  | { name: 'payloadGto_in', alias?: string  } 
  | { name: 'payloadGto_not_in', alias?: string  } 
  | { name: 'payloadGto_lt', alias?: string  } 
  | { name: 'payloadGto_lte', alias?: string  } 
  | { name: 'payloadGto_gt', alias?: string  } 
  | { name: 'payloadGto_gte', alias?: string  } 
  | { name: 'kgLeo', alias?: string  } 
  | { name: 'kgLeo_not', alias?: string  } 
  | { name: 'kgLeo_in', alias?: string  } 
  | { name: 'kgLeo_not_in', alias?: string  } 
  | { name: 'kgLeo_lt', alias?: string  } 
  | { name: 'kgLeo_lte', alias?: string  } 
  | { name: 'kgLeo_gt', alias?: string  } 
  | { name: 'kgLeo_gte', alias?: string  } 
  | { name: 'kgGto', alias?: string  } 
  | { name: 'kgGto_not', alias?: string  } 
  | { name: 'kgGto_in', alias?: string  } 
  | { name: 'kgGto_not_in', alias?: string  } 
  | { name: 'kgGto_lt', alias?: string  } 
  | { name: 'kgGto_lte', alias?: string  } 
  | { name: 'kgGto_gt', alias?: string  } 
  | { name: 'kgGto_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RocketCreateInput {
  name?: string
  country?: string
  cost?: number
  payloadLeo?: number | null
  payloadGto?: number | null
  kgLeo?: number | null
  kgGto?: number | null
}
export type RocketCreateInputInputObject =
  | Extract<keyof RocketCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'cost', alias?: string  } 
  | { name: 'payloadLeo', alias?: string  } 
  | { name: 'payloadGto', alias?: string  } 
  | { name: 'kgLeo', alias?: string  } 
  | { name: 'kgGto', alias?: string  } 
  
export interface RocketUpdateInput {
  name?: string | null
  country?: string | null
  cost?: number | null
  payloadLeo?: number | null
  payloadGto?: number | null
  kgLeo?: number | null
  kgGto?: number | null
}
export type RocketUpdateInputInputObject =
  | Extract<keyof RocketUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'cost', alias?: string  } 
  | { name: 'payloadLeo', alias?: string  } 
  | { name: 'payloadGto', alias?: string  } 
  | { name: 'kgLeo', alias?: string  } 
  | { name: 'kgGto', alias?: string  } 
  
export interface RocketUpdateManyMutationInput {
  name?: string | null
  country?: string | null
  cost?: number | null
  payloadLeo?: number | null
  payloadGto?: number | null
  kgLeo?: number | null
  kgGto?: number | null
}
export type RocketUpdateManyMutationInputInputObject =
  | Extract<keyof RocketUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'cost', alias?: string  } 
  | { name: 'payloadLeo', alias?: string  } 
  | { name: 'payloadGto', alias?: string  } 
  | { name: 'kgLeo', alias?: string  } 
  | { name: 'kgGto', alias?: string  } 
  
export interface RocketSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: RocketWhereInput | null
  AND?: RocketSubscriptionWhereInput[]
  OR?: RocketSubscriptionWhereInput[]
  NOT?: RocketSubscriptionWhereInput[]
}
export type RocketSubscriptionWhereInputInputObject =
  | Extract<keyof RocketSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type RocketOrderByInputValues =
  | 'name_ASC'
  | 'name_DESC'
  | 'country_ASC'
  | 'country_DESC'
  | 'cost_ASC'
  | 'cost_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'payloadLeo_ASC'
  | 'payloadLeo_DESC'
  | 'payloadGto_ASC'
  | 'payloadGto_DESC'
  | 'kgLeo_ASC'
  | 'kgLeo_DESC'
  | 'kgGto_ASC'
  | 'kgGto_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  