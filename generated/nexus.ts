/**
 * This file was automatically generated by Nexus 0.11.2
 * Do not make changes to this file directly
 */




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  RocketCreateInput: { // input type
    cost: number; // Int!
    country: string; // String!
    kgGto?: number | null; // Int
    kgLeo?: number | null; // Int
    name: string; // String!
    payloadGto?: number | null; // Int
    payloadLeo?: number | null; // Int
  }
  RocketWhereUniqueInput: { // input type
    id?: string | null; // ID
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Mutation: {};
  Query: {};
  Rocket: { // root type
    cost: number; // Int!
    country: string; // String!
    id: string; // ID!
    kgGto?: number | null; // Int
    kgLeo?: number | null; // Int
    name: string; // String!
    payloadGto?: number | null; // Int
    payloadLeo?: number | null; // Int
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  RocketCreateInput: NexusGenInputs['RocketCreateInput'];
  RocketWhereUniqueInput: NexusGenInputs['RocketWhereUniqueInput'];
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createRocket: NexusGenRootTypes['Rocket']; // Rocket!
  }
  Query: { // field return type
    rocket: NexusGenRootTypes['Rocket'] | null; // Rocket
  }
  Rocket: { // field return type
    cost: number; // Int!
    country: string; // String!
    id: string; // ID!
    kgGto: number | null; // Int
    kgLeo: number | null; // Int
    name: string; // String!
    payloadGto: number | null; // Int
    payloadLeo: number | null; // Int
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createRocket: { // args
      data: NexusGenInputs['RocketCreateInput']; // RocketCreateInput!
    }
  }
  Query: {
    rocket: { // args
      where: NexusGenInputs['RocketWhereUniqueInput']; // RocketWhereUniqueInput!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Query" | "Rocket";

export type NexusGenInputNames = "RocketCreateInput" | "RocketWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}